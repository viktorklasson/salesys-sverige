// Simple Verto WebRTC implementation
window.Verto = function(config) {
  this.config = config;
  this.ws = null;
  this.currentCall = null;
  
  // Initialize WebSocket connection
  this.connect = function() {
    try {
      this.ws = new WebSocket(this.config.socketUrl);
      
      this.ws.onopen = () => {
        console.log('Verto WebSocket connected');
        // Send login
        this.send({
          "jsonrpc": "2.0",
          "method": "login",
          "params": {
            "login": this.config.login,
            "passwd": this.config.passwd
          },
          "id": 1
        });
        if (this.config.onWSConnect) this.config.onWSConnect();
      };
      
      this.ws.onclose = () => {
        console.log('Verto WebSocket closed');
        if (this.config.onWSClose) this.config.onWSClose();
      };
      
      this.ws.onmessage = (event) => {
        try {
          const msg = JSON.parse(event.data);
          this.handleMessage(msg);
        } catch (e) {
          console.error('Error parsing message:', e);
        }
      };
      
      this.ws.onerror = (error) => {
        console.error('WebSocket error:', error);
      };
    } catch (error) {
      console.error('Error connecting:', error);
    }
  };
  
  this.send = function(msg) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(msg));
    }
  };
  
  this.handleMessage = function(msg) {
    console.log('Received message:', msg);
    
    if (msg.method === 'verto.event') {
      if (msg.params && msg.params.eventType === 'channelCreate') {
        if (this.config.onDialogState) {
          this.config.onDialogState({
            state: { name: 'trying' }
          });
        }
      } else if (msg.params && msg.params.eventType === 'channelAnswer') {
        if (this.config.onDialogState) {
          this.config.onDialogState({
            state: { name: 'active' }
          });
        }
      } else if (msg.params && msg.params.eventType === 'channelHangup') {
        if (this.config.onDialogState) {
          this.config.onDialogState({
            state: { name: 'destroy' }
          });
        }
      }
    }
  };
  
  this.newCall = function(params) {
    console.log('Making call to:', params.destination_number);
    
    this.send({
      "jsonrpc": "2.0",
      "method": "verto.invite",
      "params": {
        "sdp": "",
        "callee_id_name": params.caller_id_name || "WebRTC User",
        "callee_id_number": params.caller_id_number || "anonymous",
        "caller_id_name": params.caller_id_name || "WebRTC User", 
        "caller_id_number": params.caller_id_number || "anonymous",
        "destination_number": params.destination_number
      },
      "id": Date.now()
    });
    
    return this;
  };
  
  this.hangup = function() {
    console.log('Hanging up call');
    this.send({
      "jsonrpc": "2.0",
      "method": "verto.bye",
      "params": {},
      "id": Date.now()
    });
  };
  
  this.answer = function() {
    console.log('Answering call');
    this.send({
      "jsonrpc": "2.0", 
      "method": "verto.answer",
      "params": {},
      "id": Date.now()
    });
  };
  
  this.logout = function() {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
  };
  
  // Auto-connect on creation
  this.connect();
  
  return this;
};