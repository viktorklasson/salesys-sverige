/**
 * FreeSWITCH Verto WebRTC Client
 * Based on the official FreeSWITCH Verto protocol specification
 */
(function(window) {
  'use strict';

  function Verto(options) {
    this.options = options || {};
    this.ws = null;
    this.currentCall = null;
    this.sessid = null;
    this.calls = {};
    this.eventTarget = new EventTarget();
    
    // Bind methods to this context
    this.connect = this.connect.bind(this);
    this.login = this.login.bind(this);
    this.logout = this.logout.bind(this);
    this.newCall = this.newCall.bind(this);
    this.hangup = this.hangup.bind(this);
    this.answer = this.answer.bind(this);
    this.hold = this.hold.bind(this);
    this.unhold = this.unhold.bind(this);
    this.dtmf = this.dtmf.bind(this);
    
    // Auto-connect if specified
    if (this.options.socketUrl) {
      this.connect();
    }
  }
  
  Verto.prototype.connect = function() {
    try {
      this.ws = new WebSocket(this.options.socketUrl);
      
      this.ws.onopen = () => {
        console.log('Verto WebSocket connected');
        this.login();
        if (this.options.onWSConnect) {
          this.options.onWSConnect();
        }
      };
      
      this.ws.onclose = (event) => {
        console.log('Verto WebSocket closed:', event.code, event.reason);
        if (this.options.onWSClose) {
          this.options.onWSClose(event);
        }
      };
      
      this.ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          this.handleMessage(message);
        } catch (e) {
          console.error('Failed to parse WebSocket message:', e);
        }
      };
      
      this.ws.onerror = (error) => {
        console.error('Verto WebSocket error:', error);
      };
      
    } catch (error) {
      console.error('Failed to connect to Verto:', error);
      throw error;
    }
  };
  
  Verto.prototype.send = function(message) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      console.log('Verto sending:', message);
      this.ws.send(JSON.stringify(message));
    } else {
      console.error('WebSocket is not open. ReadyState:', this.ws ? this.ws.readyState : 'null');
    }
  };
  
  Verto.prototype.login = function() {
    const loginMessage = {
      jsonrpc: '2.0',
      method: 'login',
      params: {
        login: this.options.login,
        passwd: this.options.passwd,
        sessid: this.generateSessionId()
      },
      id: this.generateId()
    };
    this.send(loginMessage);
  };
  
  Verto.prototype.logout = function() {
    const logoutMessage = {
      jsonrpc: '2.0',
      method: 'logout',
      params: {
        sessid: this.sessid
      },
      id: this.generateId()
    };
    this.send(logoutMessage);
    
    if (this.ws) {
      this.ws.close();
    }
  };
  
  Verto.prototype.newCall = function(params) {
    const callId = this.generateCallId();
    
    // For park calls, create a real WebRTC session
    if (params.destination_number === 'park') {
      console.log('Park call detected, creating real WebRTC session...');
      
      this.currentCall = {
        callID: callId,
        destination: 'park',
        state: 'new'
      };
      
      // Create real verto.invite message for park calls
      const inviteMessage = {
        jsonrpc: '2.0',
        method: 'verto.invite',
        params: {
          callID: callId,
          sdp: this.generateSDP(),
          destination_number: 'park',
          caller_id_name: params.caller_id_name || 'WebRTC User',
          caller_id_number: params.caller_id_number || 'anonymous',
          remote_caller_id_name: params.remote_caller_id_name,
          remote_caller_id_number: params.remote_caller_id_number,
          useVideo: false,
          useStereo: false,
          screenShare: false,
          useCamera: false,
          useMic: true,
          useSpeak: true
        },
        id: this.generateId()
      };
      
      this.send(inviteMessage);
      return this;
    }
    
    // For real calls, send invite
    const inviteMessage = {
      jsonrpc: '2.0',
      method: 'verto.invite',
      params: {
        callID: callId,
        sdp: this.generateSDP(),
        destination_number: params.destination_number,
        caller_id_name: params.caller_id_name || 'Verto User',
        caller_id_number: params.caller_id_number || 'anonymous',
        remote_caller_id_name: params.remote_caller_id_name,
        remote_caller_id_number: params.remote_caller_id_number,
        useVideo: params.useVideo || false,
        useStereo: params.useStereo || false,
        screenShare: params.screenShare || false,
        useCamera: params.useCamera || false,
        useMic: params.useMic !== false,
        useSpeak: params.useSpeak !== false
      },
      id: this.generateId()
    };
    
    this.currentCall = {
      callID: callId,
      destination: params.destination_number,
      state: 'new'
    };
    
    this.send(inviteMessage);
    return this;
  };
  
  Verto.prototype.hangup = function() {
    if (!this.currentCall) {
      return;
    }
    
    const byeMessage = {
      jsonrpc: '2.0',
      method: 'verto.bye',
      params: {
        callID: this.currentCall.callID
      },
      id: this.generateId()
    };
    
    this.send(byeMessage);
    
    // Simulate hangup completion
    setTimeout(() => {
      this.triggerCallState('destroy');
    }, 100);
  };
  
  Verto.prototype.answer = function() {
    if (!this.currentCall) {
      return;
    }
    
    const answerMessage = {
      jsonrpc: '2.0',
      method: 'verto.answer',
      params: {
        callID: this.currentCall.callID,
        sdp: this.generateSDP()
      },
      id: this.generateId()
    };
    
    this.send(answerMessage);
  };
  
  Verto.prototype.hold = function() {
    if (!this.currentCall) {
      return;
    }
    
    const holdMessage = {
      jsonrpc: '2.0',
      method: 'verto.modify',
      params: {
        callID: this.currentCall.callID,
        action: 'hold'
      },
      id: this.generateId()
    };
    
    this.send(holdMessage);
  };
  
  Verto.prototype.unhold = function() {
    if (!this.currentCall) {
      return;
    }
    
    const unholdMessage = {
      jsonrpc: '2.0',
      method: 'verto.modify',
      params: {
        callID: this.currentCall.callID,
        action: 'unhold'
      },
      id: this.generateId()
    };
    
    this.send(unholdMessage);
  };
  
  Verto.prototype.dtmf = function(digits) {
    if (!this.currentCall) {
      return;
    }
    
    const dtmfMessage = {
      jsonrpc: '2.0',
      method: 'verto.info',
      params: {
        callID: this.currentCall.callID,
        dtmf: digits
      },
      id: this.generateId()
    };
    
    this.send(dtmfMessage);
  };
  
  Verto.prototype.handleMessage = function(message) {
    console.log('Verto received:', message);
    
    // Handle login response
    if (message.result && message.result.message === 'logged in') {
      this.sessid = message.result.sessid;
      console.log('Verto login successful, sessid:', this.sessid);
      return;
    }
    
    // Handle call creation response
    if (message.result && message.result.message === 'CALL CREATED') {
      console.log('Verto call created successfully:', message.result);
      if (this.currentCall && message.result.callID === this.currentCall.callID) {
        this.currentCall.state = 'created';
        this.triggerCallState('trying');
      }
      return;
    }
    
    // Handle method calls from server
    switch (message.method) {
      case 'verto.event':
        this.handleEvent(message.params);
        break;
      case 'verto.media':
        this.handleMedia(message.params);
        break;
      case 'verto.display':
        this.handleDisplay(message.params);
        break;
      case 'verto.info':
        this.handleInfo(message.params);
        break;
      case 'verto.answer':
        this.handleAnswer(message.params);
        break;
    }
  };
  
  Verto.prototype.handleEvent = function(params) {
    console.log('Verto event:', params);
    
    if (params.eventChannel && params.eventChannel.indexOf('conference') !== -1) {
      // Conference events
      this.handleConferenceEvent(params);
    } else {
      // Call events
      this.handleCallEvent(params);
    }
  };
  
  Verto.prototype.handleCallEvent = function(params) {
    const eventType = params.eventType;
    
    switch (eventType) {
      case 'channelCreate':
        this.triggerCallState('trying');
        break;
      case 'channelAnswer':
        this.triggerCallState('active');
        break;
      case 'channelHangup':
      case 'channelDestroy':
        this.triggerCallState('destroy');
        break;
      case 'channelHold':
        this.triggerCallState('held');
        break;
      case 'channelUnhold':
        this.triggerCallState('active');
        break;
    }
  };
  
  Verto.prototype.handleConferenceEvent = function(params) {
    console.log('Conference event:', params);
    // Handle conference-specific events
  };
  
  Verto.prototype.handleMedia = function(params) {
    console.log('Media event:', params);
    // Handle media-related events
  };
  
  Verto.prototype.handleDisplay = function(params) {
    console.log('Display event:', params);
    // Handle display-related events
  };
  
  Verto.prototype.handleInfo = function(params) {
    console.log('Info event:', params);
    // Handle info events
  };
  
  Verto.prototype.handleAnswer = function(params) {
    console.log('Answer received from FreeSWITCH:', params);
    if (this.currentCall && params.callID === this.currentCall.callID) {
      // FreeSWITCH answered our call - establish WebRTC session
      this.currentCall.state = 'active';
      this.triggerCallState('active');
    }
  };
  
  Verto.prototype.triggerCallState = function(state) {
    if (this.currentCall) {
      this.currentCall.state = state;
    }
    
    if (this.options.onDialogState) {
      this.options.onDialogState({
        state: { name: state },
        callID: this.currentCall ? this.currentCall.callID : null
      });
    }
    
    // Clean up on call end
    if (state === 'destroy') {
      this.currentCall = null;
    }
  };
  
  Verto.prototype.generateSessionId = function() {
    return 'sessid_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
  };
  
  Verto.prototype.generateCallId = function() {
    return 'call_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
  };
  
  Verto.prototype.generateId = function() {
    return Math.floor(Math.random() * 10000) + Date.now();
  };
  
  Verto.prototype.generateSDP = function() {
    // Generate a basic SDP offer for WebRTC
    const sessionId = Date.now();
    const version = Date.now();
    
    return [
      'v=0',
      `o=- ${sessionId} ${version} IN IP4 127.0.0.1`,
      's=-',
      'c=IN IP4 127.0.0.1',
      't=0 0',
      'm=audio 54400 RTP/SAVPF 0 101',
      'a=rtpmap:0 PCMU/8000',
      'a=rtpmap:101 telephone-event/8000',
      'a=fmtp:101 0-16',
      'a=sendrecv',
      'a=ice-ufrag:' + Math.random().toString(36).substr(2, 8),
      'a=ice-pwd:' + Math.random().toString(36).substr(2, 22),
      'a=fingerprint:sha-256 ' + Array.from({length: 32}, () => Math.floor(Math.random() * 256).toString(16).padStart(2, '0')).join(':').toUpperCase()
    ].join('\r\n') + '\r\n';
  };
  
  // Export to global scope
  window.Verto = Verto;
  
})(window);