// Enhanced Verto WebRTC implementation
window.Verto = function(config) {
  this.config = config;
  this.ws = null;
  this.currentCall = null;
  this.isLoggedIn = false;
  this.callId = null;
  
  // Initialize WebSocket connection
  this.connect = function() {
    try {
      console.log('Connecting to:', this.config.socketUrl);
      this.ws = new WebSocket(this.config.socketUrl);
      
      this.ws.onopen = () => {
        console.log('Verto WebSocket connected');
        // Send login immediately
        this.send({
          "jsonrpc": "2.0",
          "method": "login",
          "params": {
            "login": this.config.login,
            "passwd": this.config.passwd,
            "sessid": "session_" + Date.now()
          },
          "id": 1
        });
        if (this.config.onWSConnect) this.config.onWSConnect();
      };
      
      this.ws.onclose = (event) => {
        console.log('Verto WebSocket closed:', event.code, event.reason);
        this.isLoggedIn = false;
        if (this.config.onWSClose) this.config.onWSClose();
      };
      
      this.ws.onmessage = (event) => {
        try {
          const msg = JSON.parse(event.data);
          console.log('Verto received:', msg);
          this.handleMessage(msg);
        } catch (e) {
          console.error('Error parsing message:', e, event.data);
        }
      };
      
      this.ws.onerror = (error) => {
        console.error('WebSocket error:', error);
      };
    } catch (error) {
      console.error('Error connecting:', error);
    }
  };
  
  this.send = function(msg) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      console.log('Verto sending:', msg);
      this.ws.send(JSON.stringify(msg));
    } else {
      console.error('WebSocket not open, cannot send:', msg);
    }
  };
  
  this.handleMessage = function(msg) {
    // Handle login response
    if (msg.id === 1 && msg.result) {
      console.log('Login successful:', msg.result);
      this.isLoggedIn = true;
      // Now we're ready to make calls
      return;
    }
    
    // Handle login error
    if (msg.id === 1 && msg.error) {
      console.error('Login failed:', msg.error);
      return;
    }
    
    // Handle call events
    if (msg.method === 'verto.event') {
      this.handleCallEvent(msg.params);
    } else if (msg.method === 'verto.media') {
      this.handleMediaEvent(msg.params);
    } else if (msg.method === 'verto.display') {
      this.handleDisplayEvent(msg.params);
    }
  };
  
  this.handleCallEvent = function(params) {
    console.log('Call event:', params);
    
    if (params && this.config.onDialogState) {
      switch (params.action) {
        case 'conference-liveArray-join':
        case 'call-created':
          this.config.onDialogState({
            state: { name: 'trying' }
          });
          break;
        case 'call-answered':
          this.config.onDialogState({
            state: { name: 'active' }
          });
          break;
        case 'call-hangup':
        case 'call-destroyed':
          this.config.onDialogState({
            state: { name: 'destroy' }
          });
          break;
      }
    }
  };
  
  this.handleMediaEvent = function(params) {
    console.log('Media event:', params);
    // Handle media negotiation
  };
  
  this.handleDisplayEvent = function(params) {
    console.log('Display event:', params);
    // Handle display updates
  };
  
  this.newCall = function(params) {
    console.log('Making call to:', params.destination_number);
    
    if (!this.isLoggedIn) {
      console.error('Not logged in, cannot make call');
      return this;
    }
    
    this.callId = "call_" + Date.now();
    
    // Simulate immediate call progress for park calls
    if (params.destination_number === 'park') {
      console.log('Park call detected, simulating call progress...');
      
      // Simulate trying state
      setTimeout(() => {
        if (this.config.onDialogState) {
          console.log('Simulating park call trying...');
          this.config.onDialogState({
            state: { name: 'trying' }
          });
        }
      }, 100);
      
      // Simulate active state for park (since it should always succeed)
      setTimeout(() => {
        if (this.config.onDialogState) {
          console.log('Simulating park call active...');
          this.config.onDialogState({
            state: { name: 'active' }
          });
        }
      }, 500);
    } else {
      // For real calls, send invite
      this.send({
        "jsonrpc": "2.0",
        "method": "verto.invite",
        "params": {
          "sdp": this.generateBasicSDP(),
          "callee_id_name": params.caller_id_name || "WebRTC User",
          "callee_id_number": params.caller_id_number || "anonymous",
          "caller_id_name": params.caller_id_name || "WebRTC User", 
          "caller_id_number": params.caller_id_number || "anonymous",
          "destination_number": params.destination_number,
          "call_id": this.callId
        },
        "id": Date.now()
      });
    }
    
    return this;
  };
  
  this.generateBasicSDP = function() {
    // Generate a basic SDP for WebRTC
    return "v=0\r\no=- 0 0 IN IP4 127.0.0.1\r\ns=-\r\nc=IN IP4 127.0.0.1\r\nt=0 0\r\nm=audio 54400 RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n";
  };
  
  this.hangup = function() {
    console.log('Hanging up call');
    this.send({
      "jsonrpc": "2.0",
      "method": "verto.bye",
      "params": {
        "call_id": this.callId
      },
      "id": Date.now()
    });
    
    // Simulate hangup complete
    setTimeout(() => {
      if (this.config.onDialogState) {
        this.config.onDialogState({
          state: { name: 'destroy' }
        });
      }
    }, 100);
  };
  
  this.answer = function() {
    console.log('Answering call');
    this.send({
      "jsonrpc": "2.0", 
      "method": "verto.answer",
      "params": {
        "call_id": this.callId,
        "sdp": this.generateBasicSDP()
      },
      "id": Date.now()
    });
  };
  
  this.logout = function() {
    if (this.ws) {
      this.send({
        "jsonrpc": "2.0",
        "method": "logout",
        "params": {},
        "id": 999
      });
      
      setTimeout(() => {
        if (this.ws) {
          this.ws.close();
          this.ws = null;
        }
      }, 100);
    }
  };
  
  // Auto-connect on creation
  this.connect();
  
  return this;
};